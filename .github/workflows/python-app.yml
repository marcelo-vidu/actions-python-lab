# This workflow will install Python dependencies, lint with a single version of Python, run tests and create an artifact containing the Python application.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

# Env configuration
env:
  AZURE_FUNCTIONAPP_NAME: 'senaclab-azure-functions'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.10'

jobs:
  # Build steps
  build:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt --target=".python_packages/lib/site-packages"; fi
        popd

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    # Artifact steps
    - name: Create artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-publish-app-artifact
        path: ./

  # Deploy steps
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: python-publish-app-artifact

    - name: Run Azure Functions Action
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
        scm-do-build-during-deployment: true
        enable-oryx-build: true
    
#    runs-on: ubuntu-latest  
#    needs: build  
#    
#    steps:
#
#      - name: Deploy to server
#        env:
#          DEPLOY_KEY: ${{ secrets.SENAC_AZURE_VM }}
#        run: |
#          mkdir -p ~/.ssh
#          echo "$DEPLOY_KEY" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#
#          # Add the SSH key to the known hosts
#          ssh-keyscan 13.92.34.6 >> ~/.ssh/known_hosts
#
#          # Deploy the artifact to the server
#          ssh azureadmin@13.92.34.6 "mkdir -p /app/data"
#          scp -r ~/work/actions-python-lab/actions-python-lab/* azureadmin@13.92.34.6:/app/data/
    